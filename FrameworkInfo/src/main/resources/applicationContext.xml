<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd">

	<context:property-placeholder location="classpath:db.properties"
		system-properties-mode="NEVER" />

	<!-- 配置事务管理 -->
	<bean id="txManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>

	<!-- 初始化管理员,项目启动的时候进行监听程序 -->
	<bean id="initAdmin" class="com.framework.web.listener.InitAdminListener" />

	<!-- 配置事务的环绕增强 -->
	<tx:advice id="txAdvice" transaction-manager="txManager">
		<tx:attributes>
			<!-- 将查询相关的方法设置在只读事务中:get/list/query开头的作为查询操作 -->
			<tx:method name="get*" read-only="true" />
			<tx:method name="list*" read-only="true" />
			<tx:method name="query*" read-only="true" />
			<tx:method name="*" />
		</tx:attributes>
	</tx:advice>
	<!-- 将事务管理的业务织入到指定的位置 -->
	<aop:config>
		<aop:pointcut expression="execution(* com.framework.service.*.*(..))"
			id="pc" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="pc" />
	</aop:config>

	<!-- 配置连接池对象 -->
	<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<property name="driverClassName" value="${driverClassName}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
	</bean>

	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<!-- 配置MyBatis的主配置文件的位置 -->
		<property name="configLocation" value="classpath:mybatis-config.xml" />
		<!-- 配置映射文件的位置 可以使用*来配置, *Mapper 表示所有的以Mapper.xml结尾的文件 -->
		<property name="mapperLocations" value="classpath:com/framework/mapper/*Mapper.xml" />
		<!-- 配置连接池 -->
		<property name="dataSource" ref="dataSource" />
		<!-- 指定需要生成别名的类所在的包 -->
		<property name="typeAliasesPackage" value="com.framework.domain" />
	</bean>

	<!-- 配置控制器的Bean -->
	<bean name="/hello" class="com.framework.controller.HelloWorldContorller"></bean>

	<!-- 第一种方式:使用注解的方式 -->
	<!-- <bean class="com.framework.controller.HelloController"></bean> -->

	<!--第二种方式:使用开启注解的方式,就不需要配置对应的bean对象信息了 -->
	<!-- 开启注解扫描 -->
	<context:component-scan base-package="com.framework.controller" />

	<!-- 试图解析器 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- 文件上传的解析器 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize">
			<value>1048576</value>
		</property>
	</bean>

	<!-- 注册拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 配置拦截器路径 -->
			<mvc:mapping path="/*" />
			<!-- 指定拦截器对象 -->
			<bean class="com.framework.web.interceptor.LoginInterceptor"></bean>
		</mvc:interceptor>
	</mvc:interceptors>

	<mvc:annotation-driven>
		<mvc:message-converters>
			<bean
				class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
				<property name="objectMapper">
					<bean class="com.fasterxml.jackson.databind.ObjectMapper">
						<property name="dateFormat">
							<bean class="java.text.SimpleDateFormat">
								<constructor-arg type="java.lang.String" value="yyyy-MM-dd HH:mm:ss" />
							</bean>
						</property>
					</bean>
				</property>
			</bean>
		</mvc:message-converters>
	</mvc:annotation-driven>

	<import resource="classpath:applicationContext-service.xml" />
	<import resource="classpath:applicationContext-mapper.xml" />
	<import resource="classpath:application-cxf-server.xml" />
</beans>